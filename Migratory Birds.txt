Description: 	You have been asked to help study the population of birds migrating across the continent. 
				Each type of bird you are interested in will be identified by an integer value. Each time a particular 
				kind of bird is spotted, its id number will be added to your array of sightings. You would like to be
				able to find out which type of bird is most common given a list of sightings. 
				Your task is to print the type number of that bird and if two or more types of birds are equally common, 
				choose the type with the smallest ID number.
				
				For example, assume your bird sightings are of types arr=[1,1,2,2,3]. There are two each of types 1 and 2, 
				and one sighting of type 3. Pick the lower of the two types seen twice: type 1.
				
				Function Description:
				Complete the migratoryBirds function in the editor below. 
				It should return the lowest type number of the most frequently sighted bird.	
				migratoryBirds has the following parameter(s):
				- arr: an array of integers representing types of birds sighted
				
				Input Format:
				The first line contains an integer denoting n, the number of birds sighted and reported in the array arr.
				The second line describes arr as n space-separated integers representing the type numbers of each bird sighted.
				
				Output Format:
				Print the type number of the most common bird; if two or more types of birds are equally common, 
				choose the type with the smallest ID number.
				
Sample Input:	6
				1 4 4 4 5 3

Sample Output:	4

				Explanation:
				The different types of birds occur in the following frequencies:
				Type 1: 1 bird
				Type 2: 0 birds
				Type 3: 1 bird
				Type 4: 3 birds
				Type 5: 1 bird
				The type number that occurs at the highest frequency is type 4, so we print 4 as our answer.

Solution:
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
import java.util.Collections;

public class Solution {

    // Complete the migratoryBirds function below.
    static int migratoryBirds(List<Integer> arr) {
		//create a hashmap to map the type of bird with its frequency of appearance.
		
        Map<Integer,Integer> birds = new HashMap<Integer,Integer>();
        birds.put(1, 1);
        birds.put(2, 1);
        birds.put(3, 1);
        birds.put(4, 1);
        birds.put(5, 1);
		
		//count number of times  a bird appeared and map that to value in birds map.
        for(Integer i:arr){
            if(birds.containsKey(i)){
                int cnt = birds.get(i);
                birds.put(i,++cnt);
            }
        }
        int max=0;
        int key=0;
		//find out the max element in birds map, then get the key of that value
		// this key is the type of bird that migrated for maximum amount of time
        for(Map.Entry<Integer,Integer> entry :birds.entrySet()){
            int value = entry.getValue();
            if(value>max){
                max =value;
                key =entry.getKey();
            }else if(value == max) {
                if(entry.getKey()<key)
                    key=entry.getKey();
            }else {}
        }
        return key;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        String[] arrItems = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> arr = new ArrayList<>();

        for (int i = 0; i < arrCount; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr.add(arrItem);
        }

        int result = migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
